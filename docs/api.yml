openapi: 3.0.3
info:
  title: Library API
  version: 1.1.0
  description: STD22001
servers:
  - url: https://library.com
tags:
  - Books
  - Authors
  - Visitors
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be after `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
          $ref: '#/components/parameters/queryPagination'
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                allOf:
                 - $ref: "#/components/schemas/PaginatedResult"
                 - type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/crupdateBook'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/{bookId}/authors/{authorId}:
    put:
      tags: 
        - Books
      summary: associate some books with some Authors
      operationId: addAuthorToBook
      parameters:
       - in: path
         name: bookId
         schema:
          type: string
         required: true
       - in: path
         name: authorId
         schema:
          type: string
         required: true
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/authors:
    put:
      tags:
        - Books
      summary: associate multiple books to an author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object  
              properties:
                bookId: 
                  type: string
                authorId:
                  type: string
      responses:
        200:
          description: A book has been associate to an author
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/Book"
  /authors:
    get:
      summary: Get all authors
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - name: authorName
          in: query
          description: |
            Filter returned authors by given name. 
            If not provided, then list is not filtered.
          schema:
            type: string
          required: false
          $ref: '#/components/parameters/pathPagination'
        
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          description: The author deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
  
  /topics :
      get:
        tags:
          - topics
        summary: get All topics
        operationId: getTopics
        
        responses:
          200 :
            description: List of all topic
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Topic' 

      put:
        tags:
           - topics
        summary: Create or update topics
        operationId: crupdateTopic
        requestBody:
           content:
              application/json:
                 schema :
                   type: array
                   items:
                     $ref: '#/components/schemas/Topic'
                   
        responses:
          200 :
            description:  Topics created or updated successfully
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Topic'
      delete :
        tags:
           - topics
        summary: Delete topics
        operationId: DeleteTopics
        description: Deletes one or multiple topics


        responses:
          200:
            description: List of deleted topics
            content:
                application/json:
                  schema:
                    type: array
                    items:
                       type: string
                       $ref: '#/components/schemas/Topic'
  /books/{bookId}/topics/{topicsId}:
    put:
      tags: 
        - topics
      summary: associate some books with some topics
      operationId: addTopicToBook
      parameters:
      - in: path
        name: bookId
        schema:
          type: string
        required: true
      - in: path
        name: TopicId
        schema:
          type: string
        required: true
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/topics:
    put:
      tags:
        - Books
      summary: associate multiple books to an topic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object  
              properties:
                bookId: 
                  type: string
                authorId:
                  type: string
      responses:
        200:
          description: A book has been associate to an topic
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/Book"
  /authors/topics :
        get: 
          summary: get all author with of topics 
          operationId: getAuthorTopic
          tags:
            - topics
          responses:
            200:
              description: list of author with topic
              content:
                  application/json:
                    schema :
                      type: array
                      items:
                          type: string
                          $ref: '#/components/schemas/AuthorTopic'
  /books/import:
    post:
      tags:
        - Books
      summary: Import a list of books
      operationId: importBooks
      requestBody:
        content:
          application/json:
            schema:
             oneOf:
                - $ref: '#/components/schemas/ImportBook'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: The list of imported books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  
  /authors/import:
    post:
      tags:
        - Authors
      summary: Import a list of authors
      operationId: importAuthors
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                  - $ref: '#/components/schemas/ImportAuthor'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet: 
            schema:
              type: string
              format: binary
      responses:
        200:
          description: The list of imported authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  /visitors/{vId}/borrow/{bId}:
    put:
      summary: Visitor borrows a book
      operationId: borroBook
      tags:
        - Visitors
      parameters:
        - $ref: '#/components/parameters/VisitorId'
        - $ref: '#/components/parameters/BookId'
      responses:
        200:
          description: Book successfully borrowed by the visitor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /visitors/{vId}/return/{bId}:
    put:
      summary: Visitor returns a book
      operationId: returnBook
      tags:
        - Visitors
      parameters:
        - $ref: '#/components/parameters/VisitorId'
        - $ref: '#/components/parameters/BookId'
      responses:
        200:
          description: Book successfully returned by the visitor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    
components:
  schemas:
    crupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
    Book:
      type: object
      allOf:
        - $ref: '#/components/schemas/crupdateBook'
      properties:
        author:
          $ref: '#/components/schemas/Author'
    PaginatedResult:
      type: object
      properties:
        page : 
          type: number
        result : 
          type: array
          items: {}
    Topic:
      type: object
      properties:
        id: 
          type: string
        topicName:
          type: string
    AuthorTopic :
       type: object
       properties:
         id:
           type: string
         author:
           $ref: '#/components/schemas/Author'
    status:
      type: object
      properties:
        statusCode:
          type: integer
          description: statut code responses
        message:
          type: string
          description: message with the status code
    body:
      type: object
      properties:
        Property: 
          type: string
    responses:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/status'
    response200:
      allOf:
        - $ref: '#/components/schemas/body'
        - $ref: '#/components/schemas/responses'
    response400:
       allOf:
        - $ref: '#/components/schemas/body'
        - $ref: '#/components/schemas/responses'
    response403:
       allOf:
        - $ref: '#/components/schemas/body'
        - $ref: '#/components/schemas/responses'
    response500:
        allOf:
        - $ref: '#/components/schemas/body'
        - $ref: '#/components/schemas/responses'
    ImportAuthor:
      type: object
      properties:
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    ImportBook:
      type: object
      properties:
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
        idAuthor:
          type: string
    ResponseStatus:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        message:
          type: string
    ResponseBodyTemplate:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
        body:
          type: object
    BadRequestBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 400
          message: BAD REQUEST
        body: {}
    ForbiddenBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 403
          message: Forbidden
        body: {}
    InternalBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 500
          message: Internal Server Error
        body: {}
    BookListBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
        - properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Book'
    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForbiddenBody'
    500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalBody'
    Visitor:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        reference:
          type: string
    Activity:
      type: object
      properties:
        vId:
          type: string
        bId:
          type: string
        createdAt:
          type: string
          format: timestamp

    Borrowing:
      allOf:
        - $ref: '#/components/schemas/Activity'

    Return:
      allOf:
        - $ref: '#/components/schemas/Activity'
##parameters
  parameters:
   queryPagination:
    in: query
    name: queryPagination
    description: Query parameters for pagination
    schema:
      type: object
      properties:
        page: 
          type: integer
          default: 1
          description: The page number to retrieve
        pageSize:
          type: integer
          default: 50
          description: Number of items per page
    required: false
   pathPagination:
    in: path
    name: pathPagination
    description: Path parameters for pagination
    schema:
      type: object
      properties:
        page:
          type: integer
          default: 1
          description: The page number to retrieve
        pageSize:
          type: integer
          default: 50
          description: Number of items per page
    required: true
   VisitorId:
      name: vId
      in: path
      description: ID of the visitor
      schema:
        type: string
      required: true
   BookId:
      name: bId
      in: path
      description: ID of the book
      schema:
        type: string
      required: true

          
             
              
          
          
        

       